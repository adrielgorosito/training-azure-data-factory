{
	"name": "DF_ValidaDims",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "parquet_ventas",
						"type": "DatasetReference"
					},
					"name": "VentasParquet"
				},
				{
					"dataset": {
						"referenceName": "DIM_Clientes",
						"type": "DatasetReference"
					},
					"name": "DimCliente"
				},
				{
					"dataset": {
						"referenceName": "DIM_Vendedor",
						"type": "DatasetReference"
					},
					"name": "DimVendedor"
				},
				{
					"dataset": {
						"referenceName": "DIM_Productos",
						"type": "DatasetReference"
					},
					"name": "DimProductos"
				},
				{
					"dataset": {
						"referenceName": "DIM_Fecha",
						"type": "DatasetReference"
					},
					"name": "DimFecha"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DIM_Productos",
						"type": "DatasetReference"
					},
					"name": "InsertDimProducto"
				},
				{
					"dataset": {
						"referenceName": "DIM_Fecha",
						"type": "DatasetReference"
					},
					"name": "InsertDimFecha"
				},
				{
					"dataset": {
						"referenceName": "DIM_Vendedor",
						"type": "DatasetReference"
					},
					"name": "InsertDimVendedor"
				},
				{
					"dataset": {
						"referenceName": "DIM_Clientes",
						"type": "DatasetReference"
					},
					"name": "InsertDimCliente"
				},
				{
					"dataset": {
						"referenceName": "parquet_staging",
						"type": "DatasetReference"
					},
					"name": "Staging"
				}
			],
			"transformations": [
				{
					"name": "SelectProductos"
				},
				{
					"name": "DistinctProductos"
				},
				{
					"name": "NoExisteProducto"
				},
				{
					"name": "ColIfNullProducto"
				},
				{
					"name": "SelectClientes"
				},
				{
					"name": "SelectVendedores"
				},
				{
					"name": "SelectFechas"
				},
				{
					"name": "DistinctVendedores"
				},
				{
					"name": "DistinctFechas"
				},
				{
					"name": "NoExisteFecha"
				},
				{
					"name": "NoExisteVendedor"
				},
				{
					"name": "ColIfNullFecha"
				},
				{
					"name": "ColIfNullVendedor"
				},
				{
					"name": "DistinctClientes"
				},
				{
					"name": "NoExisteCliente"
				},
				{
					"name": "ColIfNullCliente"
				},
				{
					"name": "BusquedaIdFecha"
				},
				{
					"name": "BusquedaIdCliente"
				},
				{
					"name": "BusquedaIdProducto"
				},
				{
					"name": "BusquedaIdVendedor"
				},
				{
					"name": "Select"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id_venta as integer,",
				"          fecha as date,",
				"          cliente as integer,",
				"          vendedor as integer,",
				"          producto as integer,",
				"          cantidad as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> VentasParquet",
				"source(output(",
				"          id_cliente as integer,",
				"          cod_cliente as integer,",
				"          nombre as string,",
				"          apellido as string,",
				"          localidad as string,",
				"          provincia as string,",
				"          validez_desde as timestamp,",
				"          validez_hasta as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimCliente",
				"source(output(",
				"          id_vendedor as integer,",
				"          cod_vendedor as integer,",
				"          nombre as string,",
				"          apellido as string,",
				"          departamento as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimVendedor",
				"source(output(",
				"          id_producto as integer,",
				"          cod_producto as integer,",
				"          nombre as string,",
				"          categoria as string,",
				"          marca as string,",
				"          precio as float",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimProductos",
				"source(output(",
				"          id_fecha as integer,",
				"          fecha as date,",
				"          {año} as integer,",
				"          mes as integer,",
				"          dia as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimFecha",
				"VentasParquet select(mapColumn(",
				"          producto",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectProductos",
				"SelectProductos aggregate(groupBy(HASHorigen = sha2(256,producto)),",
				"     each(match(true()), $$ = first($$))) ~> DistinctProductos",
				"DistinctProductos, DimProductos exists(producto == cod_producto,",
				"     negate:true,",
				"     broadcast: 'auto')~> NoExisteProducto",
				"NoExisteProducto derive(cod_producto = coalesce(producto, -9999),",
				"          nombre = '-9999',",
				"          categoria = '-9999',",
				"          marca = '-9999',",
				"          precio = '-9999') ~> ColIfNullProducto",
				"VentasParquet select(mapColumn(",
				"          cliente",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectClientes",
				"VentasParquet select(mapColumn(",
				"          vendedor",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectVendedores",
				"VentasParquet select(mapColumn(",
				"          fecha",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFechas",
				"SelectVendedores aggregate(groupBy(HASHorigen = sha2(256,vendedor)),",
				"     each(match(true()), $$ = first($$))) ~> DistinctVendedores",
				"SelectFechas aggregate(groupBy(HASHorigen = sha2(256,fecha)),",
				"     each(match(true()), $$ = first($$))) ~> DistinctFechas",
				"DistinctFechas, DimFecha exists(DistinctFechas@fecha == DimFecha@fecha,",
				"     negate:true,",
				"     broadcast: 'auto')~> NoExisteFecha",
				"DistinctVendedores, DimVendedor exists(vendedor==cod_vendedor,",
				"     negate:true,",
				"     broadcast: 'auto')~> NoExisteVendedor",
				"NoExisteFecha derive(id_fecha = coalesce(year(fecha) * 10000 + month(fecha) * 100 + dayOfMonth(fecha),-9999),",
				"          fecha = coalesce(fecha, toTimestamp(-9999)),",
				"          {año} = coalesce(year(fecha), -9999),",
				"          mes = coalesce(month(fecha), -99),",
				"          dia = coalesce(dayOfMonth(fecha), -99)) ~> ColIfNullFecha",
				"NoExisteVendedor derive(cod_vendedor = coalesce(vendedor, -9999),",
				"          nombre = '-9999',",
				"          apellido = '-9999',",
				"          departamento = '-9999') ~> ColIfNullVendedor",
				"SelectClientes aggregate(groupBy(HASHorigen = sha2(256,cliente)),",
				"     each(match(true()), $$ = first($$))) ~> DistinctClientes",
				"DistinctClientes, DimCliente exists(cliente == cod_cliente,",
				"     negate:true,",
				"     broadcast: 'auto')~> NoExisteCliente",
				"NoExisteCliente derive(cod_cliente = coalesce(cliente, -9999),",
				"          nombre = '-9999',",
				"          apellido = '-9999',",
				"          localidad = '-9999',",
				"          provincia = '-9999',",
				"          validez_desde = currentTimestamp(),",
				"          validez_hasta = '-9999') ~> ColIfNullCliente",
				"VentasParquet, DimFecha lookup(VentasParquet@fecha == DimFecha@fecha,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> BusquedaIdFecha",
				"BusquedaIdFecha, DimCliente lookup(cliente == cod_cliente,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> BusquedaIdCliente",
				"BusquedaIdCliente, DimProductos lookup(producto == cod_producto,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> BusquedaIdProducto",
				"BusquedaIdProducto, DimVendedor lookup(vendedor == cod_vendedor,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> BusquedaIdVendedor",
				"BusquedaIdVendedor select(mapColumn(",
				"          id_fecha,",
				"          id_cliente,",
				"          id_producto,",
				"          id_vendedor,",
				"          cantidad",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Select",
				"ColIfNullProducto sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id_producto as integer,",
				"          cod_producto as integer,",
				"          nombre as string,",
				"          categoria as string,",
				"          marca as string,",
				"          precio as float",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          cod_producto,",
				"          nombre,",
				"          categoria,",
				"          marca,",
				"          precio",
				"     )) ~> InsertDimProducto",
				"ColIfNullFecha sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id_fecha as integer,",
				"          fecha as date,",
				"          {año} as integer,",
				"          mes as integer,",
				"          dia as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          id_fecha,",
				"          fecha,",
				"          {año},",
				"          mes,",
				"          dia",
				"     )) ~> InsertDimFecha",
				"ColIfNullVendedor sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id_vendedor as integer,",
				"          cod_vendedor as integer,",
				"          nombre as string,",
				"          apellido as string,",
				"          departamento as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          cod_vendedor,",
				"          nombre,",
				"          apellido,",
				"          departamento",
				"     )) ~> InsertDimVendedor",
				"ColIfNullCliente sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id_cliente as integer,",
				"          cod_cliente as integer,",
				"          nombre as string,",
				"          apellido as string,",
				"          localidad as string,",
				"          provincia as string,",
				"          validez_desde as timestamp,",
				"          validez_hasta as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          cod_cliente,",
				"          nombre,",
				"          apellido,",
				"          localidad,",
				"          provincia,",
				"          validez_desde,",
				"          validez_hasta",
				"     )) ~> InsertDimCliente",
				"Select sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['staging.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Staging"
			]
		}
	}
}