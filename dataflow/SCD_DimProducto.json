{
	"name": "SCD_DimProducto",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CSV_Productos",
						"type": "DatasetReference"
					},
					"name": "OrigenProductos"
				},
				{
					"dataset": {
						"referenceName": "DIM_Productos",
						"type": "DatasetReference"
					},
					"name": "DimProductos",
					"description": "Importar datos de DIM_Productos"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DIM_Productos",
						"type": "DatasetReference"
					},
					"name": "ReceptorUpsert",
					"description": "Exportar datos a DIM_Productos"
				},
				{
					"dataset": {
						"referenceName": "DIM_Productos",
						"type": "DatasetReference"
					},
					"name": "ReceptorDelete"
				}
			],
			"transformations": [
				{
					"name": "DistinctOrigen"
				},
				{
					"name": "Upsert"
				},
				{
					"name": "DistinctExistentesDim"
				},
				{
					"name": "NoExisten"
				},
				{
					"name": "Delete"
				}
			],
			"scriptLines": [
				"source(output(",
				"          cod_producto as string,",
				"          Nombre as string,",
				"          Categoria as string,",
				"          Marca as string,",
				"          Precio as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> OrigenProductos",
				"source(output(",
				"          id_producto as integer,",
				"          cod_producto as integer,",
				"          nombre as string,",
				"          categoria as string,",
				"          marca as string,",
				"          precio as float",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimProductos",
				"OrigenProductos aggregate(groupBy(HASHorigen = sha2(256,cod_producto)),",
				"     each(match(true()), $$ = first($$))) ~> DistinctOrigen",
				"DistinctOrigen alterRow(upsertIf(true())) ~> Upsert",
				"DimProductos aggregate(groupBy(HASHexistentes = sha2(256,cod_producto)),",
				"     each(match(true()), $$ = first($$))) ~> DistinctExistentesDim",
				"DistinctExistentesDim, DistinctOrigen exists(HASHexistentes == HASHorigen,",
				"     negate:true,",
				"     broadcast: 'auto')~> NoExisten",
				"NoExisten alterRow(deleteIf(true())) ~> Delete",
				"Upsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id_producto as integer,",
				"          cod_producto as integer,",
				"          nombre as string,",
				"          categoria as string,",
				"          marca as string,",
				"          precio as float",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:[(cod_producto)],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          cod_producto,",
				"          nombre = Nombre,",
				"          categoria = Categoria,",
				"          marca = Marca,",
				"          precio = Precio",
				"     )) ~> ReceptorUpsert",
				"Delete sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id_producto as integer,",
				"          cod_producto as integer,",
				"          nombre as string,",
				"          categoria as string,",
				"          marca as string,",
				"          precio as float",
				"     ),",
				"     deletable:true,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:false,",
				"     keys:['cod_producto'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError') ~> ReceptorDelete"
			]
		}
	}
}